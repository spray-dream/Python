{"./":{"url":"./","title":"introduction ","keywords":"","body":"课程内容 app自动化测试工具-appium 学习目标 掌握app测试的环境搭建 掌握appium的用法 © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"00.target.html":{"url":"00.target.html","title":"Appium","keywords":"","body":"学习目标 掌握Android环境和ADB的使用 掌握appium的使用 环境搭建 创建Driver对象 进行元素操作 进行手势操作 © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"01-introduce.html":{"url":"01-introduce.html","title":"移动测试介绍","keywords":"","body":"移动测试 概念 定义： 测试手机程序 测试的方面 功能测试 : 查看功能是否正常 安装卸载测试 升级测试 兼容性测试 Android系统版本 厂商二次开发版本 不同的分辨率 不同的网络 网络切换、中断测试 使用中来电话、短信 横竖屏切换 健壮性：耗电量、流量消耗、崩溃回复 © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"02-environment.html":{"url":"02-environment.html","title":"环境搭建","keywords":"","body":"移动测试 环境搭建 java sdk 安装 配置 JAVA_HOME 和 PATH Android SDK 解压 配置 ANDROID_HOME 和 PATH 虚拟机安装- 使用夜神模拟器 也可以使用真机 手机通过usb线 连接到电脑 在手机上打开文件传输(通知栏，手机正在充电) 在电脑上会发现多了一个CD驱动器，里面是手机的驱动 安装驱动，电脑的设备管理器中就可以看到型号了 开启开发者模式： 手机 -- 设置 -- 关于手机 -- 版本号 (多次点击) 打开USB调试： 手机 -- 设置 开发者选项 -- usb调试(打开) © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"03-adb.html":{"url":"03-adb.html","title":"adb的使用","keywords":"","body":"移动测试 ADB 关系 会在电脑上创建出来一个服务(ADB服务) 手机连上电脑后，都会与服务建立连接 要想发送指令给手机， 需要把指令发送到服务中。 定义 就是一个 Android Debug Bridge 安卓调试桥 即包含ADB服务，也包含了与服务对应的Client 作用 通过命令行去操作手机 命令 重要 服务 (如果发现代码连不上手机了) adb kill-server adb start-server 查看设备 adb devices 进入手机终端 adb shell 获取信息 adb shell getprop ro.build.version.release 获取手机android版本 adb shell dumpsys window windows | findstr mFocusedApp 获取手机当前运行的程序和界面的名称 其他 文件传输 adb push 电脑上的文件 手机上的位置 adb pull 手机上的文件 电脑上的位置 软件安装卸载 adb install 电脑上的apk文件路径 安装应用 adb uninstall 应用的包名 获取其他信息 adb shell am start -W 包名/.启动名 © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"04-appium1.html":{"url":"04-appium1.html","title":"入门案例","keywords":"","body":"移动测试 自动化测试工具 选取了 Appnium。 支持的语言多、支持的平台多 环境搭建 安装appnium的程序 在python中安装 Appium-Python-Client 代码 入门案例 # 1. 连接设备 # 组装一个字典，注明平台、系统版本、名称 # 注明要打开的应用和界面的名称 from appium import webdriver # server 启动参数 desired_caps = {} desired_caps['platformName'] = 'Android' desired_caps['platformVersion'] = '5.1' desired_caps['deviceName'] = '192.168.56.101:5555' desired_caps['appPackage'] = 'com.android.settings' desired_caps['appActivity'] = '.Settings' # 从appium库里面导入driver对象 # driver = webdriver.Remomte('appnium程序的地址','一个字典，要获取设置的要求') driver = webdriver.Remote('http://127.0.0.1:4723/wd/hub', desired_caps) # 2. 执行操作 # driver.xxx # element = driver.find_element_by_xx() # element.xxx # 3. 退出 driver.close_app() driver.quit() © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"05-basic.html":{"url":"05-basic.html","title":"基础操作","keywords":"","body":"移动测试 基础操作 基础API driver close_app() 关闭打开的应用 quit() 断开连接 (后续不能发送指令了) install_app('apk 在电脑的绝对路径') 安装应用 remove_app('应用的包名') 卸载应用 is_app_installed('应用的包名') 判断应用是否安装 push_file(目标位置, base64编码的内容) pull_file(来源位置) 返回值是base64编码的内容 page_source 获取界面xml源码 find_element.... find_elements.... current_package 获取当前操作的应用的包名 current_activity 获取当前操作的界面的名称 element text 获取元素文本内容 click() 点击元素对应位置 get_attribute(属性名称) 获取属性值 location 获取元素左上角的坐标 (相对于屏幕的左上角) size 获取元素的宽高 (字典) 输入文本 对于有些元素，可以接受文本输入。 send_keys(文本内容) 可以输入文字，但 对于中文，在连接设备的时候要加上配置 desired_caps['unicodeKeyboard'] = True #unicode设置(允许中文输入) desired_caps['resetKeyboard'] = True #键盘设置(允许中文输入) 如果对于同一个元素，多次调用此方法，会先一个一个删除掉原有内容，再输入 clear() 清空文本框中的内容 © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"06-模拟手势.html":{"url":"06-模拟手势.html","title":"模拟手势","keywords":"","body":"移动测试 安卓内在机制 对于目前不需要在屏幕中显示的内容，是不处理的，为了节省硬件资源 安卓使用了栈的方式管理界面 页面滑动有\"惯性\"机制，会根据按下、抬起的位置 以及 总的时间， 滚动不一样的距离 滚动 swipe(self, start_x: int, start_y: int, end_x: int, end_y: int, duration: int = 0) 注意 duration 默认是600 单位是毫秒 它会影响实际滚动的距离 还需要注意： click方法，实际上并不是点元素，而是点元素所在位置。 在获取的时候有位置，但可以经过滑动，位置发生了变化，可能点不准。非常有可能在点击之前睡一会，等待滑动结束。 scroll( origin_el, destination_el, duration) scroll 直接传递元素作为参数即可，不需要手动获取位置 scroll 底层实现 有swipe有一些区别，没有中间的采样点 ，只有起始、结束，但最终的效果和swipe是一样的 拖拽 在安卓中，拖拽 = 按下 等待一定时间 移动 松手 drag_and_drop(origin_el, destination_el) TouchAction 作用 构建相对比较复杂的、连续的触摸行为 用法 创建TouchAction对象 ，需要把driver作为参数传递 通过各种方法添加动作 执行操作 perform() 方法 按下 press(self, el, x, y, pressure) 如果传递了 el参数 ，x、y可以不传 如果el为None，就需要传递x、y pressure 是ios专用的 长按 long_press(self, el, x, y,duration=1000) 如果传递了 el参数 ，x、y可以不传 如果el为None，就需要传递x、y 移动 move_to(self, el, x, y) 如果传递了 el参数 ，x、y可以不传 如果el为None，就需要传递x、y 等待 wait(self, ms) ms 等待时间，单位毫秒 松手 release() 轻敲(点击) tap(self, element, x, y, count= 1) tap 和 click的区别： click有延迟触发效果 (为了校验是不是双击) 通过 tap(el,count=2)可以模拟双击 © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"07-案例.html":{"url":"07-案例.html","title":"综合案例","keywords":"","body":"移动测试 案例- 设置图形密码 from appium import webdriver import time from appium.webdriver.common.touch_action import TouchAction desired_caps = {} # 设备信息 desired_caps['platformName'] = 'Android' #平台名称 desired_caps['platformVersion'] = '5.1.1' #平台版本 desired_caps['deviceName'] = '127.0.0.1:62001' #设备号 # app信息 desired_caps['appPackage'] = 'com.android.settings' #应用的包名 desired_caps['appActivity'] = '.ChooseLockPattern' #代表启动的activity # 允许输入中文 desired_caps['unicodeKeyboard'] = True #unicode设置(允许中文输入) desired_caps['resetKeyboard'] = True #键盘设置(允许中文输入) driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps) #声明driver对象,让手机完成脚本操作 # 1 进入 设置密码界面 # 见 # app信息 # 2. 依次滑动 1 3 7 9 点 画出z字形 # 发现 没有单个的 点 元素 ，他们是一个整体，只能通过 位置 去滑动了 # 以下代码有问题， 对于同一个view move_to 效果是move_by # 导致，操作的坐标点 ，超出了屏幕 # Coordinate [x=540.0, y=620.0] is outside of element rect: [0,0][540,960] # action = TouchAction(driver) # action.press(x= 90, y= 310) #1号点 90 310 # action.move_to(x= 450, y=310 )# 3号点 450 310 # action.move_to(x= 90, y= 670)# 7号点 90 670 # action.move_to(x= 450, y= 670 )# 9号点 450 670 # action.release() # action.perform() # 如果没有wait 太快了。一闪而过 action = TouchAction(driver) action.press(x= 90, y= 310) #1号点 90 310 action.wait(100) action.move_to(x= 360, y=0 )# 3号点 450 310 action.wait(1000) action.move_to(x= -360, y= 360)# 7号点 90 670 action.wait(200) action.move_to(x= 360, y= 0 )# 9号点 450 670 action.release() action.perform() time.sleep(5) driver.close_app() driver.quit() driver的其他操作 .device_time 获取手机时间 .get_window_size() 获取屏幕大小 .network_connection 获取手机网络信息 1 飞行模式 2 wifi 4 移动数据 6=2+4 .set_network_connection(网络模式数字) 设置手机网络信息 .keyevent(按键数字)点击按键 get_screenshot_as_file/save_screenshot(图片路径) 截屏 .open_notifications() 打开通知栏 © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "},"08-其他操作.html":{"url":"08-其他操作.html","title":"其他操作","keywords":"","body":"移动测试 案例- 设置图形密码 from appium import webdriver import time from appium.webdriver.common.touch_action import TouchAction desired_caps = {} # 设备信息 desired_caps['platformName'] = 'Android' #平台名称 desired_caps['platformVersion'] = '5.1.1' #平台版本 desired_caps['deviceName'] = '127.0.0.1:62001' #设备号 # app信息 desired_caps['appPackage'] = 'com.android.settings' #应用的包名 desired_caps['appActivity'] = '.ChooseLockPattern' #代表启动的activity # 允许输入中文 desired_caps['unicodeKeyboard'] = True #unicode设置(允许中文输入) desired_caps['resetKeyboard'] = True #键盘设置(允许中文输入) driver = webdriver.Remote('http://localhost:4723/wd/hub', desired_caps) #声明driver对象,让手机完成脚本操作 # 1 进入 设置密码界面 # 见 # app信息 # 2. 依次滑动 1 3 7 9 点 画出z字形 # 发现 没有单个的 点 元素 ，他们是一个整体，只能通过 位置 去滑动了 # 以下代码有问题， 对于同一个view move_to 效果是move_by # 导致，操作的坐标点 ，超出了屏幕 # Coordinate [x=540.0, y=620.0] is outside of element rect: [0,0][540,960] # action = TouchAction(driver) # action.press(x= 90, y= 310) #1号点 90 310 # action.move_to(x= 450, y=310 )# 3号点 450 310 # action.move_to(x= 90, y= 670)# 7号点 90 670 # action.move_to(x= 450, y= 670 )# 9号点 450 670 # action.release() # action.perform() # 如果没有wait 太快了。一闪而过 action = TouchAction(driver) action.press(x= 90, y= 310) #1号点 90 310 action.wait(100) action.move_to(x= 360, y=0 )# 3号点 450 310 action.wait(1000) action.move_to(x= -360, y= 360)# 7号点 90 670 action.wait(200) action.move_to(x= 360, y= 0 )# 9号点 450 670 action.release() action.perform() time.sleep(5) driver.close_app() driver.quit() driver的其他操作 .device_time 获取手机时间 .get_window_size() 获取屏幕大小 .network_connection 获取手机网络信息 1 飞行模式 2 wifi 4 移动数据 6=2+4 .set_network_connection(网络模式数字) 设置手机网络信息 .keyevent(按键数字)点击按键 get_screenshot_as_file/save_screenshot(图片路径) 截屏 .open_notifications() 打开通知栏 © 2021 测试猿--猫熊 all right reserved，powered by Gitbook本文档更新于： 2021-05 "}}